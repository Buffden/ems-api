services:
  postgres:
    image: postgres:latest
    container_name: postgres
    environment:
      POSTGRES_USER: ${DB_CREDENTIALS_USR}
      POSTGRES_PASSWORD: ${DB_CREDENTIALS_PSW}
      POSTGRES_DB: employee_management_db
    ports:
      - "5433:5432" # Host port 5433, container port 5432
    networks:
      - app-network
    volumes:
      - postgres_data:/var/lib/postgresql/data # Persist PostgreSQL data

  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: springboot-app
    depends_on:
      - postgres
    environment:
      DB_URL: jdbc:postgresql://postgres:5432/employee_management_db # Point to the 'postgres' container
      DB_CREDENTIALS_USR: ${DB_CREDENTIALS_USR}
      DB_CREDENTIALS_PSW: ${DB_CREDENTIALS_PSW}
    ports:
      - "8080:8080"
    networks:
      - app-network
    volumes:
      - ./app_logs:/app/logs # Add volume for app logs if required (optional)

  jenkins:
    image: jenkins/jenkins:lts
    container_name: jenkins
    user: root # Running as root to avoid permissions issues
    ports:
      - "8081:8080" # Expose Jenkins on a different port
      - "50000:50000"
    environment:
      - JENKINS_ADMIN_ID=admin
      - JENKINS_ADMIN_PASSWORD=admin
    volumes:
      - /var/jenkins_home:/var/jenkins_home
      - /var/run/docker.sock:/var/run/docker.sock # Mount Docker socket
    networks:
      - app-network
    restart: unless-stopped # Ensures container restarts if it fails

networks:
  app-network:
    driver: bridge

volumes:
  postgres_data: {}
